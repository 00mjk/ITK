/**

  \page NeighborhoodIterators Neighborhood Iterators


  \section Introduction

  Neighborhood iterators are the abstraction of the concept of \em locality in
  image processing. A classical use of this notion is to compute the mean of a
  set of pixels in order to reduce noise in an image. This is typically done by
  taking a region of 3x3 pixels and computing the mean of their values. A new
  image is produced with the resulting means, this new image contains a lower
  amount of high frequencies and a cause of that a reduced amount of noise.

  This code in classicla \em texbook notation can look like:

  \code

  int nx = 512;
  int ny = 512;
  ImageType image(nx,ny);
  for(int x=1; x<nx-1; x++) 
  {
    float sum = 0;
    for(int y=1; y<ny-1; y++) 
    {
      sum += image(x-1,y-1) + image(x  ,y-1) + image(x+1,y-1);
      sum += image(x-1,y  ) + image(x  ,y  ) + image(x+1,y  );
      sum += image(x-1,y+1) + image(x  ,y+1) + image(x+1,y+1);
    }
  }
  
  \endcode


  Which shows clearly why neghborhood greater than 5x5 are rarely used...

  A large variety of tricks has been proposed to speed up this kind of
  processes but all of them tend to make the code hard to read and error prone.
  
  ITK neighborhood iterators are closer to the algorithmic abraction, that
  should be:

  ForAllThePixels p in Image
     GetTheNeighbors in a 3x3 region
       Compute their means
         Write the value to the output
 
  Here is how this is writen in ITK:         


  \code

  ImageType::Pointer image = GetImageSomehow();
  
  NeighborhoodIterator it;
  
  \endcode
        
  \section  

  \subsection

  

*/
