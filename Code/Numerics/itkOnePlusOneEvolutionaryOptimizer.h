/*=========================================================================

  Program:   Insight Segmentation & Registration Toolkit
  Module:    itkOnePlusOneEvolutionaryOptimizer.h
  Language:  C++
  Date:      $Date$
  Version:   $Revision$

  Copyright (c) 2002 Insight Consortium. All rights reserved.
  See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even 
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
#ifndef __ONEPLUSONEEVOLUTIONARYOPTIMIZER_H
#define __ONEPLUSONEEVOLUTIONARYOPTIMIZER_H


#include <itkSingleValuedNonLinearOptimizer.h>

namespace itk
{

/** \class OnePlusOneEvolutionaryOptimizer
 * \brief 1+1 evolutionary strategy optimizer
 *
 * This optimizer searches for the optimal parameters. It changes its search
 * radius and position using the grow factor, shrink factor, and isotropic 
 * probability function (which is a random unit normal variate generator).   
 *
 * This optimizer needs a cost function and a random unit normal 
 * variate generator.
 * The cost function should return cost with new position in parameter space
 * which will be generated by 1+1 evolutionary strategy.
 *
 * This optimizing scheme was initially developed and implemented 
 * by Martin Styner, Univ. of North Carolina at Chapel Hill, and his
 * colleagues.
 *
 * For more details. refer to the following articles.
 * "Parametric estimate of intensity inhomogeneities applied to MRI" 
 * Martin Styner, G. Gerig, Christian Brechbuehler, Gabor Szekely,  
 * IEEE TRANSACTIONS ON MEDICAL IMAGING; 19(3), pp. 153-165, 2000, 
 * (http://www.cs.unc.edu/~styner/docs/tmi00.pdf)
 *
 * "Evaluation of 2D/3D bias correction with 1+1ES-optimization" 
 * Martin Styner, Prof. Dr. G. Gerig (IKT, BIWI, ETH Zuerich), TR-197
 * (http://www.cs.unc.edu/~styner/docs/StynerTR97.pdf)
 *
 * \ingroup Numerics Optimizers
 *
 * \sa FastRandomUnitNormalVariateGenerator 
 */

template< class TNormalRandomVariateGenerator>
class ITK_EXPORT OnePlusOneEvolutionaryOptimizer: 
    public SingleValuedNonLinearOptimizer
{
public:
  /** Standard "Self" typedef. */
  typedef OnePlusOneEvolutionaryOptimizer     Self ;
  typedef SingleValuedNonLinearOptimizer      Superclass;
  typedef SmartPointer<Self>                  Pointer;
  typedef SmartPointer<const Self>            ConstPointer;
  
  /** Method for creation through the object factory. */
  itkNewMacro(Self);
 
  /** Run-time type information (and related methods). */
  itkTypeMacro(OnePlusOneEvolutionaryOptimizer, SingleValuedNonLinearOptimizer );
 
  /** Type of the Cost Function   */
  typedef  SingleValuedCostFunction         CostFunctionType;
  typedef  CostFunctionType::Pointer        CostFunctionPointer;

  /** Normal random variate generator type. */
  typedef TNormalRandomVariateGenerator NormalRandomVariateGeneratorType ;
  typedef typename TNormalRandomVariateGenerator::Pointer  
                   NormalRandomVariateGeneratorPointerType ;
  
  /** Set/Get maximum iteration limit. */
  itkSetMacro( MaximumIteration, int );
  itkGetConstMacro( MaximumIteration, int );

  /** Get the search radius grow factor in parameter space. */
  itkGetConstMacro( GrowthFactor, double );

  /** Get search radius shrink factor. */
  itkGetConstMacro( ShrinkFactor, double );

  /** Get initial search radius in parameter space. */
  itkGetConstMacro( InitialRadius, double );

  /** Set/Get the minimal size of search radius 
   * (frobenius_norm of covariance matrix). */
  itkSetMacro( Epsilon, double );   
  itkGetConstMacro( Epsilon, double );   
  
  /** set seed number for the normal random variate generator.
   * if users don't provide the seed, this optimizer will use 
   * rand() function return value as seed.  */
  itkSetMacro( RandomSeed, long );
  itkGetConstMacro( RandomSeed, long );

  /** Initializes the optimizer.
   * Before running this optimizer, this function should have been called.
   *
   * initialRadius: search radius in parameter space
   * grow: search radius grow factor
   * shrink: searhc radius shrink factor */
  void Initialize(double initialRadius, double grow = -1, double shrink = -1) ;

  /** Start optimization.
   * Optimization will stop when it meets either of two termination conditions,
   * the maximum iteration limit or epsilon (minimal search radius)  */
  void Run() throw (ExceptionObject) ;

protected:
  OnePlusOneEvolutionaryOptimizer() ;
  virtual ~OnePlusOneEvolutionaryOptimizer() ;

private:
  
  /** Smart pointer to the normal random variate generator. */
  NormalRandomVariateGeneratorPointerType m_RandomGenerator ;

  /** Maximum iteration limit. */
  int m_MaximumIteration ;

  /** The minimal size of search radius 
   * (frobenius_norm of covariance matrix). */ 
  double m_Epsilon ;

  /** Initial search radius in paramter space. */
  double m_InitialRadius ;

  /** Search radius growth factor in parameter space. */
  double m_GrowthFactor ;

  /** Search radius shrink factor in parameter space, */
  double m_ShrinkFactor ;

  /** Seed number for the normal random variate generator. */
  long m_RandomSeed ;

  /** Flag tells if the optimizer was initialized using Initialize function. */
  bool m_Initialized ;

  /** Internal storage for the value type / used as a cache  */
  MeasureType       m_Value;

} ; // end of class

} // end of namespace itk

#ifndef ITK_MANUAL_INSTANTIATION
#include "itkOnePlusOneEvolutionaryOptimizer.txx"
#endif


#endif
