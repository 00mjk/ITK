/*=========================================================================

  Program:   Insight Segmentation & Registration Toolkit
  Module:    itkOnePlusOneEvolutionaryOptimizer.h
  Language:  C++
  Date:      $Date$
  Version:   $Revision$

Copyright (c) 2001 Insight Consortium
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * The name of the Insight Consortium, nor the names of any consortium members,
   nor of any contributors, may be used to endorse or promote products derived
   from this software without specific prior written permission.

  * Modified source versions must be plainly marked as such, and must not be
    misrepresented as being the original software.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=========================================================================*/
#ifndef __ONEPLUSONEEVOLUTIONARYOPTIMIZER_H
#define __ONEPLUSONEEVOLUTIONARYOPTIMIZER_H

#include <vnl/vnl_matrix.h>
#include <vnl/vnl_vector.h>

#include <itkSingleValuedNonLinearOptimizer.h>

namespace itk
{

/** \class OnePlusOneEvolutionaryOptimizer
 * \brief 1+1 evolutionary strategy optimizer
 *
 * This optimizer searches for the optimal parameters. It changes its search
 * radius and position using the grow factor, shrink factor, and isotropic 
 * probability function (which is a random unit normal variate generator).   
 *
 * This optimizer needs a cost function and a random unit normal 
 * variate generator.
 * The cost function should return cost with new position in parameter space
 * which will be generated by 1+1 evolutionary strategy.
 *
 * This optimizing scheme was initially developed and implemented 
 * by Martin Styner, Univ. of North Carolina at Chapel Hill, and his
 * colleagues.
 *
 * For more details. refer to the following articles.
 * "Parametric estimate of intensity inhomogeneities applied to MRI" 
 * Martin Styner, G. Gerig, Christian Brechbuehler, Gabor Szekely,  
 * IEEE TRANSACTIONS ON MEDICAL IMAGING; 19(3), pp. 153-165, 2000, 
 * (http://www.cs.unc.edu/~styner/docs/tmi00.pdf)
 *
 * "Evaluation of 2D/3D bias correction with 1+1ES-optimization" 
 * Martin Styner, Prof. Dr. G. Gerig (IKT, BIWI, ETH Zuerich), TR-197
 * (http://www.cs.unc.edu/~styner/docs/StynerTR97.pdf)
 *
 * \ingroup Numerics Optimizers
 *
 * \sa FastRandomUnitNormalVariateGenerator 
 */

template<class TCostFunction, class TNormalRandomVariateGenerator>
class ITK_EXPORT OnePlusOneEvolutionaryOptimizer: 
    public SingleValuedNonLinearOptimizer<TCostFunction>
{
public:
  /** Standard "Self" typedef. */
  typedef OnePlusOneEvolutionaryOptimizer Self ;
  typedef SingleValuedNonLinearOptimizer<TCostFunction> Superclass;
  typedef SmartPointer<Self>   Pointer;
  typedef SmartPointer<const Self>  ConstPointer;
  
  /** Method for creation through the object factory. */
  itkNewMacro(Self);
 
  /** Run-time type information (and related methods). */
  itkTypeMacro(OnePlusOneEvolutionaryOptimizer, SingleValuedNonLinearOptimizer );
 
  /** Cost measure function type. */
  typedef TCostFunction CostFunctionType;

  /** Normal random variate generator type. */
  typedef TNormalRandomVariateGenerator NormalRandomVariateGeneratorType ;
  typedef typename TNormalRandomVariateGenerator::Pointer  
                   NormalRandomVariateGeneratorPointerType ;
  
  /** Parameter space dimension
   *
   * NOTE: if user specifies space dimension using SetSpaceDimension function,
   * this optimizer will use the given value instead of this enum value. */
  enum { SpaceDimension = TCostFunction::SpaceDimension };
  
  /** Parameter type. */
  typedef typename TCostFunction::ParametersType ParametersType;
  
  /** Return value type of cost function. */
  typedef typename TCostFunction::MeasureType MeasureType;

  /** Inherited from superclass. Not used. */
  typedef typename TCostFunction::DerivativeType DerivativeType;

  /** Store the pointer to the cost function object. */
  void SetCostFunction(CostFunctionType* costFunction) ;

  /** Set maximum iteration limit. */
  void SetMaximumIteration(int maxIter) ;

  /** Get maximum iteration limit. */
  int GetMaximumIteration() { return m_MaximumIteration ;} 

  /** Override the SpaceDimension enum definition (parameter space dimension). */ 
  void SetSpaceDimension(int dimension) ;

  /** Get the search radius grow factor in parameter space. */
  double GetGrowFactor() { return m_GrowFactor ;} 

  /** Get search radius shrink factor. */
  double GetShrinkFactor() { return m_ShrinkFactor ;} 

  /** Get initial search radius in parameter space. */
  double GetInitialRadius() { return m_InitialRadius ;} 

  /** Set the minimal size of search radius 
   * (frobenius_norm of covariance matrix). */
  void SetEpsilon(double epsilon) ;
  
  /** Get the minial size of search radius. */
  double GetEpsilon() { return m_Epsilon ;}

  /** set seed number for the normal random variate generator.
   * if users don't provide the seed, this optimizer will use 
   * rand() function return value as seed.  */
  void SetRandomSeed(long seed) ;

  /** Get the seed number for the normal random variate generator. */
  long GetRandomSeed() { return m_RandomSeed ;} 

  /** Initializes the optimizer.
   * Before running this optimizer, this function should have been called.
   *
   * initialRadius: search radius in parameter space
   * grow: search radius grow factor
   * shrink: searhc radius shrink factor */
  void Initialize(double initialRadius, double grow = -1, double shrink = -1) ;

  /** Start optimization.
   * Optimization will stop when it meets either of two termination conditions,
   * the maximum iteration limit or epsilon (minimal search radius)  */
  void Run() throw (ExceptionObject) ;

protected:
  OnePlusOneEvolutionaryOptimizer() ;
  virtual ~OnePlusOneEvolutionaryOptimizer() ;

private:
  /** Pointer to the cost function. */
  CostFunctionType* m_CostFunction ;
  
  /** Return value from cost function. */
  MeasureType m_Value ;

  /** Smart pointer to the normal random variate generator. */
  NormalRandomVariateGeneratorPointerType m_RandomGenerator ;

  /** Maximum iteration limit. */
  int m_MaximumIteration ;

  /** The minimal size of search radius 
   * (frobenius_norm of covariance matrix). */ 
  double m_Epsilon ;

  /** Initial search radius in paramter space. */
  double m_InitialRadius ;

  /** Search radius grow factor in parameter space. */
  double m_GrowFactor ;

  /** Search radius shrink factor in parameter space, */
  double m_ShrinkFactor ;

  /** Parameter space dimension. */
  int m_SpaceDimension ;

  /** Seed number for the normal random variate generator. */
  long m_RandomSeed ;

  /** Flag tells if the optimizer was initialized using Initialize function. */
  bool m_Initialized ;

} ; // end of class

} // end of namespace itk

#ifndef ITK_MANUAL_INSTANTIATION
#include "itkOnePlusOneEvolutionaryOptimizer.txx"
#endif


#endif
