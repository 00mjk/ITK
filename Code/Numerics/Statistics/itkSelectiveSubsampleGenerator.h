/*=========================================================================

  Program:   Insight Segmentation & Registration Toolkit
  Module:    itkSelectiveSubsampleGenerator.h
  Language:  C++
  Date:      $Date$
  Version:   $Revision$

  Copyright (c) 2002 Insight Consortium. All rights reserved.
  See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even 
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
#ifndef __itkSelectiveSubsampleGenerator_h
#define __itkSelectiveSubsampleGenerator_h


#include "itkObject.h"
#include "itkMembershipSample.h"

namespace itk{
  namespace Statistics{

/** \class SelectiveSubsampleGenerator
 * \brief SelectiveSubsampleGenerator generates a MembershipSample object
 * using a class mask sample.
 *
 * You can see it as a filter that takes two samples as input and generates 
 * a MembershipSample. There are two class template arguments first one 
 * is the type of basic sample that has measurement vectors in it, and
 * the second one is the type of sample that its measurement vectors has 
 * only one component - class label. What it does is that it merges 
 * measurement vectors and class labels in a single MembershipSample
 * object.
 *
 * To get the MembershipSample object you should plug in the input sample
 * and the class mask sample using SetInput and SetClassMask methods 
 * respectively.
 *
 * NOTE: This generator expects the class labels in the class mask sample
 * to be integer value where the value starts 0 and increases without
 * any missing value between 0 to the last class label value.
 *
 * \sa MembershipSample
 */

template< class TInputSample, class TClassMaskSample >
class ITK_EXPORT SelectiveSubsampleGenerator : 
      public Object
{
public:
  /** Standard class typedefs. */
  typedef SelectiveSubsampleGenerator Self;
  typedef Object Superclass ;
  typedef SmartPointer<Self> Pointer;

  /** Standard Macros */
  itkTypeMacro(SelectiveSubsampleGenerator, Object);
  itkNewMacro(Self) ;

  /** Input sample types alias */
  typedef typename TInputSample::MeasurementVectorType MeasurementVectorType ;

  typedef typename TClassMaskSample::MeasurementType ClassLabelType ;
  typedef std::vector< ClassLabelType > ClassLabelVectorType ;

  /** Output: MembershipSample types */
  typedef Subsample< TInputSample > OutputType ;
  typedef typename OutputType::Pointer OutputPointer ;

  /** Stores the input sample */
  void SetInput(TInputSample* sample) ;
  
  /** Returns the input sample pointer */
  TInputSample* GetInput() ;

  /** Stores the class mask sample */
  void SetClassMask(TClassMaskSample* classMask) ;

  /** Returns the class mask sample pointer*/
  TClassMaskSample* GetClassMask() ;

  void SetSelectedClassLabels( const ClassLabelVectorType& classLabels )
  { m_SelectedClassLabels = classLabels ; }

  /** Returns the pointer to the MembershipSample object
   * that has been generated by this */
  OutputType* GetOutput() ;

  /** The actual output generation procedure. */
  void GenerateData() ;

protected:
  SelectiveSubsampleGenerator() ;
  virtual ~SelectiveSubsampleGenerator() {}
  void PrintSelf(std::ostream& os, Indent indent) const;

private:
  TInputSample* m_Input ;
  TClassMaskSample* m_ClassMask ;
  ClassLabelVectorType m_SelectedClassLabels ;
  OutputPointer m_Output ;
} ; // end of class

  } // end namespace Statistics
} // end namespace itk

#ifndef ITK_MANUAL_INSTANTIATION
#include "itkSelectiveSubsampleGenerator.txx"
#endif

#endif
