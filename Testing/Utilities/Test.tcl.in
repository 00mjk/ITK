
source [file join Testing Utilities Utility.conf]
source [file join Testing Utilities Utility.tcl]

set Model Experimental
if { $argc > 0 } \
{
  set Model [lindex $argv 0]
}

set HTMLDir [file join Testing HTML]
set TempDir [file join Testing Temporary]

set SiteDir [file join $HTMLDir TestingResults Sites $Site]
set BuildNameDir [file join $SiteDir $BuildName]

# Find the build name directory
set BuildStampDir [GetLastBuildDirectory $Model]
if { $BuildStampDir == "" } \
{
  puts stderr "Could not find any builds in the $BuildNameDir to do testing $Result"
  exit 1
}

set BuildStamp [file tail $BuildStampDir]
set XMLDir [file join $BuildStampDir XML]

set Out [open [file join $XMLDir Test.xml] w]

puts $Out {<?xml version="1.0" encoding="UTF-8"?>}
# puts $Out {<!DOCTYPE Insight>}
puts $Out "<Site BuildName=\"$BuildName\" BuildStamp=\"$BuildStamp\" Name=\"$Site\">"

puts $Out {<Testing>}
puts $Out "\t<StartDateTime>[clock format [clock seconds]]</StartDateTime>"


proc FindTests { Path } \
{
  global TestList
  set Tests [GetCMakeVariable TESTS]
  puts "Tests: $Tests"
  foreach Test $Tests \
  {
    lappend TestList "[file join $Path $Test]"
  }
  foreach SubDir [GetCMakeVariable SUBDIRS] \
  {
    cd $SubDir
    FindTests [file join $Path $SubDir]
    cd ..
  }
}

# Find the list of canidate tests
set TestList ""
set OldDir [pwd]
cd $SourceDirectory
FindTests .
cd $OldDir

proc RemoveFile { file } \
{
  puts "Removing $file"
  file delete -force -- $file
}

# Delete any old coverage files
FileMap [glob *] [list *.da *.gcov] RemoveFile

# Write the list
puts $Out "\t<TestList>"
foreach Test $TestList \
{
  puts $Out "\t\t<Test>[XMLSafeString $Test]</Test>"
}
puts $Out "\t</TestList>"

# For each test, cd to the directory, and run it.
foreach Test $TestList \
{
  cd [file dirname $Test]

  set Status notrun
  set Result ""
  set Filename [file tail $Test]
  
  if { [file exists $Filename] && [file executable $Filename] } \
  {
    set Status [catch { exec [file join . $Filename] } Result]
    if { $Status == 0 } \
    {
      set Status passed
    } \
    else \
    {
      set Status failed
    }
  }
  puts $Out "\t<Test Status=\"$Status\">"
  puts $Out "\t\t<Name>[XMLSafeString $Filename]</Name>"
  puts $Out "\t\t<Path>[XMLSafeString [file dirname $Test]]</Path>"
  puts $Out "\t\t<FullName>[XMLSafeString $Test]</FullName>"
  puts $Out "\t\t<Results>"
  puts $Out "\t\t\t<Measurement>"
  puts $Out "\t\t\t\t<Value>[XMLSafeString $Result]</Value>"
  puts $Out "\t\t\t</Measurement>"
  puts $Out "\t\t</Results>"
  puts $Out "\t</Test>"

  cd $OldDir

}

puts $Out "\t<EndDateTime>[clock format [clock seconds]]</EndDateTime>"

puts $Out "</Testing>"
puts $Out "</Site>"


close $Out
exit

