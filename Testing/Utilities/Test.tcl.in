# =========================================================================
# 
#   Program:   Insight Segmentation & Registration Toolkit
#   Module:    Test.tcl.in
#   Language:  Tcl
#   Date:      $Date$
#   Version:   $Revision$
# 

Copyright (c) 2001 Insight Consortium
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * The name of the Insight Consortium, nor the names of any consortium members,
   nor of any contributors, may be used to endorse or promote products derived
   from this software without specific prior written permission.

  * Modified source versions must be plainly marked as such, and must not be
    misrepresented as being the original software.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=========================================================================*/


source [file join Testing Utilities Utility.conf]
source [file join Testing Utilities Utility.tcl]

set Model Experimental
if { $argc > 0 } \
{
  set Model [lindex $argv 0]
}

set HTMLDir [file join Testing HTML]
set TempDir [file join Testing Temporary]

set SiteDir [file join $HTMLDir TestingResults Sites $Site]
set BuildNameDir [file join $SiteDir $BuildName]

# Find the build name directory
set BuildStampDir [GetLastBuildDirectory $Model]
if { $BuildStampDir == "" } \
{
  puts  "\tCould not find any builds in the $BuildNameDir to do testing $Result"
  exit 1
}

set BuildStamp [file tail $BuildStampDir]
set XMLDir [file join $BuildStampDir XML]

set Out [open [file join $XMLDir Test.xml] w]

puts $Out {<?xml version="1.0" encoding="UTF-8"?>}
# puts $Out {<!DOCTYPE Insight>}
puts $Out "<Site BuildName=\"$BuildName\" BuildStamp=\"$BuildStamp\" Name=\"$Site\">"

puts $Out {<Testing>}
puts $Out "\t<StartDateTime>[clock format [clock seconds]]</StartDateTime>"

# Find the list of canidate tests
puts "\tFinding Tests"
set TestList ""
set OldDir [pwd]
cd $SourceDirectory
FindTests .
cd $OldDir
puts "\tFound [llength $TestList] tests"

proc RemoveFile { file } \
{
  file delete -force -- $file
}

# Delete any old coverage files
catch { FileMap [glob -nocomplain *] [list *.da *.gcov] RemoveFile } Result

# Write the list
puts $Out "\t<TestList>"
foreach Test $TestList \
{
  puts $Out "\t\t<Test>[XMLSafeString $Test]</Test>"
}
puts $Out "\t</TestList>"

proc CheckFile { Filename } \
{
  return [expr [file exists $Filename] && [file executable $Filename]]
}

# For each test, cd to the directory, and run it.
puts "\tRunning Tests"
set ReportPassed 0
set ReportFailed 0
set ReportNotRun 0
foreach Test $TestList \
{
  cd [file dirname $Test]

  set Filename [file tail $Test]

  switch $tcl_platform(platform) \
  {
    windows \
    {
      if { [regexp cygtclsh [info nameofexecutable]] == 0 } {
        # Windows build
	set NewFilename [file join Release $Filename.exe]
      } else {
        # Cygwin build
        set NewFilename [file join . $Filename]
      }
    }
    default \
    {
      set NewFilename [file join . $Filename]
    }
  }
  
  set Status notrun
  set Result ""
  if { [CheckFile $NewFilename] } \
  {
    set Status [catch { eval exec $NewFilename } Result]
  }
  if { $Status == 0 } \
  {
    set Status passed
  }
  if { $Status == 1 } \
  {
    set Status failed
  }
  switch $Status \
  {
    notrun { incr ReportNotRun }
    passed { incr ReportPassed }
    failed { incr ReportFailed }
  }
  
  puts $Out "\t<Test Status=\"$Status\">"
  puts $Out "\t\t<Name>[XMLSafeString $Filename]</Name>"
  puts $Out "\t\t<Path>[XMLSafeString [file dirname $Test]]</Path>"
  puts $Out "\t\t<FullName>[XMLSafeString $Test]</FullName>"
  puts $Out "\t\t<Results>"
  puts $Out "\t\t\t<Measurement>"
  puts $Out "\t\t\t\t<Value>[XMLSafeString $Result]</Value>"
  puts $Out "\t\t\t</Measurement>"
  puts $Out "\t\t</Results>"
  puts $Out "\t</Test>"

  cd $OldDir

}

puts $Out "\t<EndDateTime>[clock format [clock seconds]]</EndDateTime>"

puts $Out "</Testing>"
puts $Out "</Site>"
set total [expr double($ReportPassed + $ReportFailed + $ReportNotRun)]
puts "\tTesting completed"
if { $total != 0.0 } \
{
  set Percent [format "%.2f" [expr 100.0 * $ReportNotRun / $total]]
  puts "\t$ReportNotRun Tests Not Run -- $Percent%"
  set Percent [format "%.2f" [expr 100.0 * $ReportFailed / $total]]
  puts "\t$ReportFailed Tests Failed -- $Percent%"
  set Percent [format "%.2f" [expr 100.0 * $ReportPassed / $total]]
  puts "\t$ReportPassed Tests Passed -- $Percent%"
}




close $Out
exit

